
#define _USE_MATH_DEFINES // for C++  

#include <cmath>
#include <iostream>
using namespace std;


class Shape
{
	int m_center_x;
	int m_center_y;
public:
	Shape(int x, int y) :m_center_x(x), m_center_y(y)
	{

	}
	virtual float square() = 0;
};

class Rectangle :public Shape
{
	float m_width;
	float m_height;
public:
	Rectangle(int x, int y, float w, float h) : Shape(x, y), m_width(w), m_height(h)
	{

	}
	float square() override
	{
		return m_width*m_height;
	}
};

class Circle : public Shape
{

	float m_radius;
public:
	Circle(int x, int y, int r) : Shape(x, y), m_radius(r)
	{
		
	}
	float square() override
	{
		return pow(m_radius, 2)*M_PI;
	}
};
class Triangle : public Shape
{

	float m_a;
	float m_b;
public:
	Triangle(int x, int y, float a1, float b1) : Shape(x, y), m_a(a1), m_b(b1)
	{
		
	}
	float square() override
	{
		return m_a*m_b*0.5;
	}
};
int main()
{
	Shape* figures[3];
	figures[0] = new Rectangle(5, 5, 4, 5);
	figures[1] = new Circle(5, 5, 10);
	figures[2] = new Triangle(5, 5, 3, 4);

	float square_sum = 0;
	for (int i = 0; i < 3; i++)
	{
		square_sum += figures[i]->square();
	}
	cout << square_sum << endl;
	return 1;
}
